{"version":3,"sources":["api.ts","atoms.ts","Toggle.tsx","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","a","fetch","then","response","json","isDarkAtom","atom","key","default","ToggleWrapper","styled","div","ToggleLabel","label","Toggle","setTheme","useSetRecoilState","useState","checked","setchecked","onChange","prev","onColor","checkedIcon","uncheckedIcon","Chart","coinId","useQuery","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","isLoading","data","type","series","map","price","x","time_close","y","open","high","low","close","options","theme","mode","chart","height","toolbar","show","background","title","text","undefined","xaxis","yaxis","Taps","Tap","props","boxColor","Percent","span","percent","Price","priceData","console","log","market_cap_change_24h","percent_change_30m","percent_change_1h","percent_change_12h","percent_change_24h","TopWrapper","Container","Header","header","Title","h1","accentColor","Loader","Overview","OverviewItem","Description","p","Tabs","Tab","isActive","textColor","Coin","useParams","state","useLocation","priceMatch","useRouteMatch","chartMatch","fetchCoinInfo","refetchInterval","infoLoading","infoData","fetchCoinTickers","ticktersLoading","tickersData","loading","Helmet","name","to","rank","symbol","quotes","USD","toFixed","description","total_supply","max_supply","path","ToggleBox","CoinsList","ul","li","Img","img","Coins","slice","coin","pathname","id","src","toLowerCase","Router","exact","darkTheme","bgColor","chartTheme","lightTheme","GlobalStyle","createGlobalStyle","App","isDark","useRecoilValue","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.892535bf.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`;\r\n\r\nexport async function fetchCoins() {\r\n    return fetch(`${BASE_URL}/coins`).then(response => \r\n        response.json()\r\n    )\r\n}\r\n\r\nexport function fetchCoinInfo(coinId:string) {\r\n    return fetch(`${BASE_URL}/coins/${coinId}`).then(response => \r\n        response.json()\r\n    )\r\n}\r\n\r\nexport function fetchCoinTickers(coinId:string) {\r\n    return fetch(`${BASE_URL}/tickers/${coinId}`).then(response => \r\n        response.json()\r\n    )\r\n}\r\n\r\nexport function fetchCoinHistory(coinId:string){\r\n    const endDate = Math.floor(Date.now() / 1000);\r\n    const startDate = endDate - 60*60*24*7*2;\r\n    return fetch(`${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`).then(response => \r\n        response.json()\r\n    )\r\n}\r\n","import { atom } from \"recoil\";\r\n\r\nexport const isDarkAtom = atom({\r\n    key:\"isDark\",\r\n    default:false\r\n});","import styled from \"styled-components\";\r\nimport Switch from \"react-switch\";\r\nimport { useState } from \"react\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { isDarkAtom } from \"./atoms\";\r\n\r\nconst ToggleWrapper = styled.div`\r\n  margin-top:15px;\r\n`;\r\n\r\nconst ToggleLabel = styled.label`\r\n  \r\n`;\r\n\r\nfunction Toggle() {\r\n    const setTheme = useSetRecoilState(isDarkAtom);\r\n    const [checked, setchecked] = useState(false);\r\n    function onChangeHandler() {\r\n        setchecked(!checked);\r\n        setTheme(prev => !prev)\r\n    }\r\n    return(\r\n        <ToggleWrapper>\r\n            <ToggleLabel>\r\n                <Switch onChange={onChangeHandler} checked={checked} onColor=\"#171B20\" checkedIcon={false} uncheckedIcon={false} />\r\n            </ToggleLabel>\r\n        </ToggleWrapper>\r\n    )\r\n}\r\n\r\nexport default Toggle;","import { useQuery } from \"react-query\";\r\nimport { fetchCoinHistory } from \"../api\";\r\nimport ApexChart from 'react-apexcharts';\r\n\r\ninterface IHistorical {\r\n  time_open: string;\r\n  time_close: string;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n  market_cap: number;\r\n}\r\n\r\ninterface CharProps {\r\n  coinId:string;\r\n}\r\n\r\nfunction Chart({coinId}:CharProps) {\r\n\r\n  const {isLoading, data} = useQuery<IHistorical[]>([\"ohlcv\", coinId], () => fetchCoinHistory(coinId));\r\n  \r\n  return (\r\n    <h1>\r\n      {isLoading ? \"Loading chart...\" : \r\n      <ApexChart \r\n        type=\"candlestick\"\r\n        series={[\r\n          {\r\n            data: data?.map(price => ({\r\n              x:price.time_close,\r\n              y:[price.open, price.high, price.low, price.close]\r\n            }))\r\n          }\r\n        ]} \r\n        options= {{\r\n          theme: {\r\n            mode:\"dark\"\r\n          },\r\n          chart: {\r\n            type: 'candlestick',\r\n            height: 350,\r\n            toolbar: {\r\n              show: false,\r\n            },\r\n            background: \"rgba(0, 0, 0, 0.5)\"\r\n          },\r\n          title: {\r\n            text: undefined,\r\n          },\r\n          xaxis: {\r\n            type: 'datetime'\r\n          },\r\n          yaxis: {\r\n            show:false\r\n          }\r\n        }}\r\n        height={350}\r\n      />\r\n      }\r\n    </h1>\r\n    );\r\n  }\r\n  \r\n  export default Chart;","import styled from \"styled-components\";\r\n\r\ninterface PriceData {\r\n  ath_date: string;\r\n  ath_price: number;\r\n  market_cap: number;\r\n  market_cap_change_24h: number;\r\n  percent_change_1h: number;\r\n  percent_change_1y: number;\r\n  percent_change_6h: number;\r\n  percent_change_7d: number;\r\n  percent_change_12h: number;\r\n  percent_change_15m: number;\r\n  percent_change_24h: number;\r\n  percent_change_30d: number;\r\n  percent_change_30m: number;\r\n  percent_from_price_ath: number;\r\n  price: number;\r\n  volume_24h: number;\r\n  volume_24h_change_24h: number;\r\n}\r\n\r\ninterface PriceProps {\r\n  priceData?:PriceData;\r\n}\r\n\r\nconst Taps = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n\r\n`;\r\n\r\nconst Tap = styled.div`\r\n  background-color: ${props => props.theme.boxColor};\r\n  display:flex;\r\n  justify-content:space-between;\r\n  align-items:center;\r\n  height:40px;\r\n  margin-bottom:10px;\r\n  border-radius:10px;\r\n  padding: 0 20px;\r\n`;\r\n\r\nconst Percent = styled.span<{percent?:number}>`\r\n  color:${props => props.percent&&props.percent>0 ? \"#2ecc71\":\"#e74c3c\" }\r\n`;\r\n\r\n\r\nfunction Price({priceData}:PriceProps) {\r\n  console.log(priceData)\r\n  return (\r\n    <Taps>\r\n      <Tap>\r\n        <span>Price :</span>\r\n        <span>$ {priceData?.price}</span>\r\n      </Tap>\r\n      <Tap>\r\n        <span>Max Change rate in last 24h :</span>\r\n        <Percent percent={priceData?.market_cap_change_24h}>{priceData?.market_cap_change_24h}%</Percent>\r\n      </Tap>\r\n      <Tap>\r\n        <span>Change rate (last 30 Minutes) :</span>\r\n        <Percent percent={priceData?.percent_change_30m}>{priceData?.percent_change_30m}%</Percent>\r\n      </Tap>\r\n      <Tap>\r\n        <span>Change rate (last 1 hours) :</span>\r\n        <Percent percent={priceData?.percent_change_1h}>{priceData?.percent_change_1h}%</Percent>\r\n      </Tap>\r\n      <Tap>\r\n        <span>Change rate (last 12 hours) :</span>\r\n        <Percent percent={priceData?.percent_change_12h}>{priceData?.percent_change_12h}%</Percent>\r\n      </Tap>\r\n      <Tap>\r\n        <span>Change rate (last 24 hours) :</span>\r\n        <Percent percent={priceData?.percent_change_24h}>{priceData?.percent_change_24h}%</Percent>\r\n      </Tap>\r\n    </Taps>\r\n  );\r\n}\r\n  \r\nexport default Price;","import { useQuery } from \"react-query\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport {\r\n    Switch,\r\n    Route,\r\n    useLocation,\r\n    useParams,\r\n    useRouteMatch,\r\n  } from \"react-router-dom\";\r\n  import { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\r\nimport Toggle from \"../Toggle\";\r\nimport Chart from \"./Chart\";\r\nimport Price from \"./Price\";\r\n\r\nconst TopWrapper = styled.div`\r\n  display:flex;\r\n  justify-content:space-between;\r\n  align-items:center;\r\n  width:440px;\r\n  height:25px;\r\n  margin-top:10px;\r\n  a {\r\n    font-size:25px;\r\n  }\r\n`;\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n  max-width:480px;\r\n  margin:0 auto;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  height: 15vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\n\r\nconst Title = styled.h1`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n`;\r\n\r\nconst Loader = styled.span`\r\n    text-align: center;\r\n    display:block;\r\n`;\r\n\r\nconst Overview = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: ${props => props.theme.boxColor};\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n`;\r\nconst OverviewItem = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  span:first-child {\r\n    font-size: 10px;\r\n    font-weight: 400;\r\n    text-transform: uppercase;\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\nconst Description = styled.p`\r\n  margin: 20px 0px;\r\n`;\r\n\r\nconst Tabs = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  margin: 25px 0px;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Tab = styled.span<{ isActive: boolean }>`\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  background-color: ${props => props.theme.boxColor};\r\n  padding: 7px 0px;\r\n  border-radius: 10px;\r\n  color: ${(props) =>\r\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\r\n  a {\r\n    display: block;\r\n  }\r\n`;\r\n\r\ninterface RouteParams {\r\n  coinId: string;\r\n}\r\n\r\ninterface RouteState{\r\n    name:string;\r\n}\r\n\r\ninterface InfoData {\r\n    id: string;\r\n    name: string;\r\n    symbol: string;\r\n    rank: number;\r\n    is_new: boolean;\r\n    is_active: boolean;\r\n    type: string;\r\n    description: string;\r\n    message: string;\r\n    open_source: boolean;\r\n    started_at: string;\r\n    development_status: string;\r\n    hardware_wallet: boolean;\r\n    proof_type: string;\r\n    org_structure: string;\r\n    hash_algorithm: string;\r\n    first_data_at: string;\r\n    last_data_at: string;\r\n}\r\n  \r\ninterface PriceData {\r\n  id: string;\r\n    name: string;\r\n    symbol: string;\r\n    rank: number;\r\n    circulating_supply: number;\r\n    total_supply: number;\r\n    max_supply: number;\r\n    beta_value: number;\r\n    first_data_at: string;\r\n    last_updated: string;\r\n    quotes: {\r\n      USD: {\r\n        ath_date: string;\r\n        ath_price: number;\r\n        market_cap: number;\r\n        market_cap_change_24h: number;\r\n        percent_change_1h: number;\r\n        percent_change_1y: number;\r\n        percent_change_6h: number;\r\n        percent_change_7d: number;\r\n        percent_change_12h: number;\r\n        percent_change_15m: number;\r\n        percent_change_24h: number;\r\n        percent_change_30d: number;\r\n        percent_change_30m: number;\r\n        percent_from_price_ath: number;\r\n        price: number;\r\n        volume_24h: number;\r\n        volume_24h_change_24h: number;\r\n    };\r\n  };\r\n}\r\n\r\nfunction Coin() {\r\n    const { coinId } = useParams<RouteParams>();\r\n    const {state} = useLocation<RouteState>();\r\n    const priceMatch = useRouteMatch(\"/:coinId/price\");\r\n    const chartMatch = useRouteMatch(\"/:coinId/chart\");\r\n    const { isLoading: infoLoading, data:infoData } = useQuery<InfoData>(\r\n        [\"info\", coinId], \r\n        () => fetchCoinInfo(coinId),\r\n        {\r\n            refetchInterval: 5000,\r\n        }\r\n        );\r\n    const { isLoading: ticktersLoading, data:tickersData } = useQuery<PriceData>([\"tickers\", coinId], () => fetchCoinTickers(coinId));\r\n    const loading = infoLoading || ticktersLoading;\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>{state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}</title>\r\n            </Helmet>\r\n            <TopWrapper>\r\n              <Link to={\"/\"}>&larr;</Link>\r\n              <Toggle />\r\n            </TopWrapper>\r\n            <Header>\r\n                <Title>{state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}</Title>\r\n            </Header>\r\n            {loading ? (\r\n            <Loader>Loading...</Loader>\r\n            ) : (\r\n                <>\r\n                    <Overview>\r\n                        <OverviewItem>\r\n                        <span>Rank:</span>\r\n                        <span>{infoData?.rank}</span>\r\n                        </OverviewItem>\r\n                        <OverviewItem>\r\n                        <span>Symbol:</span>\r\n                        <span>${infoData?.symbol}</span>\r\n                        </OverviewItem>\r\n                        <OverviewItem>\r\n                        <span>Price:</span>\r\n                        <span>${tickersData?.quotes.USD.price.toFixed(2)}</span>\r\n                        </OverviewItem>\r\n                    </Overview>\r\n                    <Description>{infoData?.description}</Description>\r\n                    <Overview>\r\n                        <OverviewItem>\r\n                        <span>Total Suply:</span>\r\n                        <span>{tickersData?.total_supply}</span>\r\n                        </OverviewItem>\r\n                        <OverviewItem>\r\n                        <span>Max Supply:</span>\r\n                        <span>{tickersData?.max_supply}</span>\r\n                        </OverviewItem>\r\n                    </Overview>\r\n\r\n                    <Tabs>\r\n                        <Tab isActive={chartMatch !== null}>\r\n                        <Link to={`/${coinId}/chart`}>Chart</Link>\r\n                        </Tab>\r\n                        <Tab isActive={priceMatch !== null}>\r\n                        <Link to={`/${coinId}/price`}>Price</Link>\r\n                        </Tab>\r\n                    </Tabs>\r\n\r\n                    <Switch>\r\n                        <Route path={`/:coinId/price`}>\r\n                        {tickersData ? (\r\n                          <Price priceData={tickersData.quotes.USD}/>\r\n                        ) : (\r\n                          <span>loading...</span>\r\n                        )}\r\n                        </Route>\r\n                        <Route path={`/:coinId/chart`}>\r\n                        <Chart coinId={coinId}/>\r\n                        </Route>\r\n                    </Switch>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\nexport default Coin;","import {Helmet} from \"react-helmet\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useQuery } from \"react-query\";\r\nimport styled from \"styled-components\";\r\nimport { fetchCoins } from \"../api\";\r\nimport Toggle from \"../Toggle\";\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n  max-width:480px;\r\n  margin:0 auto;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  height: 15vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n`;\r\n\r\nconst ToggleBox = styled.div`\r\n  display:flex;\r\n  justify-content:flex-end;\r\n  height:15px;\r\n`;\r\n\r\nconst CoinsList = styled.ul``;\r\n\r\nconst Coin = styled.li`\r\n  background-color: ${props => props.theme.boxColor};\r\n  color: ${(props) => props.theme.textColor};\r\n  border-radius: 15px;\r\n  margin-bottom: 10px;\r\n  a {\r\n    display:flex;\r\n    align-items:center;\r\n    padding: 20px;\r\n    transition: color 0.2s ease-in;\r\n  }\r\n  &:hover {\r\n    a {\r\n      color: ${(props) => props.theme.accentColor};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Loader = styled.span`\r\n    text-align: center;\r\n    display:block;\r\n`;\r\nconst Img = styled.img`\r\n    width: 35px;\r\n    height: 35px;\r\n    margin-right:10px;\r\n`;\r\n\r\ninterface ICoin {\r\n    id: string,\r\n    name: string,\r\n    symbol: string,\r\n    rank: number,\r\n    is_new: boolean,\r\n    is_active: boolean,\r\n    type: string,\r\n}\r\n\r\nfunction Coins() {\r\n    const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>Coin</title>\r\n            </Helmet>\r\n            <ToggleBox>\r\n              <Toggle />\r\n            </ToggleBox>\r\n          <Header>\r\n            <Title>Coin</Title>\r\n          </Header>\r\n          {isLoading ? <Loader>Loading...</Loader> :<CoinsList>\r\n            {data?.slice(0, 100).map((coin) => (\r\n              <Coin key={coin.id}>\r\n                <Link to={{\r\n                    pathname:`/${coin.id}`,\r\n                    state:{name:coin.name}\r\n                }}>\r\n                    <Img src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`} />\r\n                    {coin.name} &rarr;\r\n                </Link> {/* &rarr; : 화살표 */}\r\n              </Coin>\r\n            ))}\r\n          </CoinsList>}\r\n        </Container>\r\n      );\r\n    }\r\n    export default Coins;","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport Coin from \"./routes/Coin\";\r\nimport Coins from \"./routes/Coins\";\r\n\r\nfunction Router() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/\" exact>\r\n          <Coins />\r\n        </Route>\r\n        <Route path=\"/:coinId\">\r\n          <Coin />\r\n        </Route>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\nexport default Router;","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme:DefaultTheme = {\r\n    bgColor: \"#2f3640\",\r\n    textColor: \"#f5f6fa\",\r\n    accentColor: \"#9c88ff\",\r\n    boxColor:\"#171b20\",\r\n    chartTheme:\"dark\"\r\n};\r\n\r\nexport const lightTheme:DefaultTheme = {\r\n  bgColor: \"#eae8e8\",\r\n  textColor: \"black\",\r\n  accentColor: \"#9c88ff\",\r\n  boxColor:\"white\",\r\n  chartTheme:\"light\"\r\n};","import Router from \"./Router\";\nimport {createGlobalStyle} from \"styled-components\";\nimport {ReactQueryDevtools} from 'react-query/devtools';\nimport { ThemeProvider } from \"styled-components\";\nimport {darkTheme, lightTheme} from './theme';\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"./atoms\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n* {\n  box-sizing:border-box\n}\nbody {\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${props => props.theme.bgColor};\n  color:${props => props.theme.textColor};\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n\tconst isDark = useRecoilValue(isDarkAtom);\n\treturn (\n\t\t<>\n\t\t\t<ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n\t\t\t\t<GlobalStyle />\n\t\t\t\t<Router />\n\t\t\t\t{/* <ReactQueryDevtools initialIsOpen={true} /> */}\n\t\t\t</ThemeProvider>\n\t\t</>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {QueryClient, QueryClientProvider} from 'react-query';\nimport { RecoilRoot } from 'recoil';\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}